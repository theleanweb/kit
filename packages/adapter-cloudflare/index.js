import { writeFileSync } from "node:fs";
import * as path from "node:path";
import { fileURLToPath } from "node:url";
import * as esbuild from "esbuild";

/** @type {import('.').default} */
export default function () {
  return {
    name: "@leanweb-kit/adapter-cloudflare",
    async adapt(builder) {
      const files = fileURLToPath(new URL("./files", import.meta.url).href);
      const dest = builder.getBuildDirectory("cloudflare");
      const tmp = builder.getBuildDirectory("cloudflare-tmp");

      builder.rimraf(dest);
      builder.mkdirp(dest);

      builder.rimraf(tmp);
      builder.mkdirp(tmp);

      const relativePath = path.posix.relative(
        tmp,
        builder.getServerDirectory()
      );

      writeFileSync(
        `${dest}/_headers`,
        generate_headers(builder.config.appDir),
        { flag: "a" }
      );

      builder.copy(`${files}/worker.js`, `${tmp}/_worker.js`, {
        replace: {
          SERVER: `${relativePath}/index.js`,
        },
      });

      await esbuild.build({
        platform: 'node',
        conditions: ["worker", "node"],
        sourcemap: "linked",
        target: "es2022",
        entryPoints: [`${tmp}/_worker.js`],
        outfile: `${dest}/_worker.js`,
        allowOverwrite: true,
        format: "esm",
        bundle: true,
        loader: {
          ".wasm": "copy",
        },
      });
    },
  };
}

/** @param {string} app_dir */
function generate_headers(app_dir) {
  return `
# === START AUTOGENERATED SVELTE IMMUTABLE HEADERS ===
/${app_dir}/*
  X-Robots-Tag: noindex
	Cache-Control: no-cache
/${app_dir}/immutable/*
  ! Cache-Control
	Cache-Control: public, immutable, max-age=31536000
# === END AUTOGENERATED SVELTE IMMUTABLE HEADERS ===
`.trimEnd();
}
